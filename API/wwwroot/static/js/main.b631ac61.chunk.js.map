{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityFilters.tsx","features/activities/dashboard/ActivityListItemPlaceHolder.tsx","features/activities/dashboard/ActivityDashboard.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetaledHeader.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/common/util/hooks.ts","features/users/RegisterSuccess.tsx","features/users/ConfirmEmail.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","toast","startsWith","userStore","logout","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","fbLogin","accessToken","refreshToken","verifyEmail","email","resendEmailConfirm","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","runInAction","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","setDisplayName","activityStore","followingCount","loadFollowings","loadUserActivities","UserStore","fbAccessToken","fbLoading","refreshTokenTimeout","creds","setToken","startRefreshTokenTimer","modalStore","closeModal","window","localStorage","removeItem","getUser","name","getFacebookLoginStatus","FB","getLoginStatus","authResponse","facebookLogin","apiLogin","catch","scope","stopRefreshTokenTimer","jwtToken","atob","split","timeout","exp","now","setTimeout","clearTimeout","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","isLoggedIn","Menu","inverted","fixed","Container","Item","exact","as","NavLink","to","header","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","MyTextInput","props","useField","field","meta","Form","Field","touched","label","Label","basic","color","initialValues","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","Header","textAlign","placeholder","type","render","marginBottom","fluid","ValidationErrors","Message","List","map","err","i","validationSchema","Yup","required","isValid","dirty","disabled","Segment","vertical","size","Divider","horizontal","LoadingComponent","Dimmer","active","Loader","MyTextArea","MySelectInput","helpers","Select","clearable","options","onChange","e","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","useParams","useState","nullable","useEffect","clearing","sub","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","floated","Reveal","animated","Content","visible","width","hidden","preventDefault","handleFollow","Card","Description","str","length","substring","truncate","bio","extra","Icon","styles","borderColor","borderWidth","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Group","attached","secondary","groupedActivities","group","marginTop","has","ActivityListItemPlaceHolder","Placeholder","minHeight","Line","Paragraph","loadingNext","setLoadingNext","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","verticalAlign","relaxed","divided","ribbon","Extra","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","setEditMode","isCurrentUser","Tab","Pane","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetCropper","setCropper","imagePreview","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","Statistic","PrivateRoute","Component","component","rest","useQuery","useLocation","search","RegisterSuccess","success","ConfirmEmail","Status","setStatus","handleConfirmEmailResend","getBody","location","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.b631ac61.chunk.js","sourcesContent":["export interface Pagination{\n    currentPage: number;\n    itemsPerPage:  number;\n    totalItems: number;\n    totalPages: number;\n}\n\nexport class PaginatedResult<T> {\n    data: T;\n    pagination: Pagination;\n\n    constructor(data: T, pagination: Pagination){\n        this.data = data;\n        this.pagination = pagination;\n    }\n}\n\nexport class PagingParams {\n    pageNumber;\n    pageSize;\n\n    constructor(pageNumber = 1, pageSize = 2){\n        this.pageNumber = pageNumber;\n        this.pageSize = pageSize;\n    }\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\nimport { request } from 'node:http';\nimport { toast } from 'react-toastify';\nimport { history } from '../..';\nimport { Activity, ActivityFormValues } from '../models/activity';\nimport { PaginatedResult } from '../models/pagination';\nimport { Photo, Profile, UserActivity } from '../models/profile';\nimport { User, UserFormValues } from '../models/user';\nimport { store } from '../stores/store';\n\nconst sleep = (delay: number) => {\n    return new Promise((resolve) => {\n        setTimeout(resolve, delay)\n    })\n}\n\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\n\naxios.interceptors.request.use(config => {\n    const token = store.commonStore.token;\n    if (token) config.headers.Authorization = `Bearer ${token}`\n    return config;\n})\n\naxios.interceptors.response.use(async response => {\n\n    if (process.env.NODE_ENV === 'development') await sleep(1000);\n    const pagination = response.headers['pagination'];\n    if (pagination){\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\n        return response as AxiosResponse<PaginatedResult<any>>;\n    }\n    return response;\n\n}, (error: AxiosError) => {\n    const {data, status, config, headers} = error.response!;\n    switch(status){\n        case 400:\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')){\n                history.push('/not-found');\n            }\n            if (data.errors){\n                const modalStateErrors = [];\n                for (const key in data.errors){\n                    if (data.errors[key]){\n                        modalStateErrors.push(data.errors[key])\n                    }\n                }\n                throw modalStateErrors.flat();\n            } else {\n                toast.error(data);\n            }\n            break;\n        case 401:\n            if (status === 401 && headers['www-authenticate']?.startsWith('Bearer error=\"invalid_token\"')){\n                store.userStore.logout();\n                toast.error('Session expired - please login again');                \n            }\n            break;\n        case 404:\n            history.push('/not-found');\n            break;\n        case 500:\n            store.commonStore.setServerError(data);\n            history.push('/server-error');\n            break;\n    }\n    return Promise.reject(error);\n})\n\nconst responseBody = <T> (response : AxiosResponse<T>) => response.data;\n\nconst requests = {\n    get: <T>  (url: string) => axios.get<T>(url).then(responseBody), \n    post: <T> (url: string, body:{}) => axios.post<T>(url, body).then(responseBody), \n    put: <T> (url: string, body:{}) => axios.put<T>(url, body).then(responseBody), \n    delete: <T>  (url: string) => axios.delete<T>(url).then(responseBody), \n}\n\nconst Activities = {\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params}).then(responseBody),\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\n    delete: (id: string) => requests.delete<void>(`/activities/${id}`),\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\n}\n\nconst Account = {\n    current: () => requests.get<User>('/account'),\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user ),\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user),\n    fbLogin: (accessToken: string) => requests.post<User>(`/account/fbLogin?accessToken=${accessToken}`, {}),\n    refreshToken: () => requests.post<User>('/account/refreshToken', {}),\n    verifyEmail: (token: string, email:string) => requests.post<void>(`/account/verifyEmail?token=${token}&email=${email}`,{}),\n    resendEmailConfirm: (email:string) => requests.get(`/account/resendEmailConfirmationLink?email=${email}`)\n}\n\nconst Profiles = {\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\n    uploadPhoto: (file: Blob) => {\n        let formData = new FormData();\n        formData.append('File', file);\n        return axios.post<Photo>('photos', formData, {\n            headers: {'Content-type' : 'multipart/form-data'}\n        })\n    },\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\n    deletePhoto: (id: string) => requests.delete(`/photos/${id}`),\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile),\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\n    listFollowings: (username: string, predicate: string) =>\n        requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\n    listActivities: (username: string, predicate: string) => \n        requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\n }\n\nconst agent = {\n    Activities,\n    Account,\n    Profiles\n}\n\nexport default agent;\n","import { Profile } from \"./profile\";\n\nexport interface Activity {\n    id: string;\n    title: string;\n    date: Date | null;\n    description: string;\n    category: string;\n    city: string;\n    venue: string;\n    hostUsername: string;\n    isCancelled: boolean;\n    isGoing: boolean;\n    isHost: boolean;\n    host?: Profile;\n    attendees: Profile[];\n  }\n\n  export class Activity implements Activity{\n    constructor(init?: ActivityFormValues){\n      Object.assign(this, init);\n    }\n  }\n\n  export class ActivityFormValues{\n    id?: string = undefined;\n    title: string = '';\n    category: string = '';\n    description: string = '';\n    date: Date | null = null;\n    city: string = '';\n    venue: string = '';\n\n    constructor(activity?: ActivityFormValues){\n      if (activity){\n        this.id = activity.id;\n        this.title = activity.title;\n        this.category = activity.category;\n        this.description = activity.description;\n        this.date = activity.date;\n        this.venue = activity.venue;\n        this.city = activity.city;\n      }\n    }\n  }","import { User } from \"./user\";\n\nexport interface Profile {\n    username: string;\n    displayName: string;\n    image?: string;\n    bio?: string;\n    followersCount: number;\n    followingCount: number;\n    following: boolean;\n    photos?: Photo[];\n}\n\nexport class Profile implements Profile{\n    constructor(user: User){\n        this.username = user.username;\n        this.displayName = user.displayName;\n        this.image = user.image;\n    }\n}\n\nexport interface Photo{\n    id: string;\n    url: string;\n    isMain: boolean;\n}\n\nexport interface UserActivity {\n    id: string;\n    title: string;\n    category: string;\n    date: Date;\n}","import { format } from \"date-fns\";\nimport { makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { Activity, ActivityFormValues } from \"../models/activity\";\nimport { Pagination, PagingParams } from \"../models/pagination\";\nimport { Profile } from \"../models/profile\";\nimport { store } from \"./store\";\n\nexport default class ActivityStore{\n    activityRegistry = new Map<string, Activity>();\n    selectedActivity: Activity | undefined = undefined;\n    editMode = false;\n    loading = false;\n    loadingInitial = false;\n    pagination: Pagination | null = null;\n    pagingParams = new PagingParams();\n    predicate = new Map().set('all', true);\n\n    constructor(){\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.predicate.keys(),\n            () => {\n                this.pagingParams = new PagingParams();\n                this.activityRegistry.clear();\n                this.loadActivities();\n            }\n        )\n    }\n\n    setPagingParams = (pagingParams : PagingParams) => {\n        this.pagingParams = pagingParams;\n    }\n\n    setPredicate = (predicate: string, value: string | Date) => {\n        const resetPredicate = () => {\n            this.predicate.forEach((value, key) => {\n                if (key !== 'startDate') this.predicate.delete(key);\n            })\n        }\n\n        switch(predicate){\n            case 'all':\n                resetPredicate();\n                this.predicate.set('all', true);\n                break;\n            case 'isGoing':\n                resetPredicate();\n                this.predicate.set('isGoing', true);\n                break;\n            case 'isHost':\n                resetPredicate();;\n                this.predicate.set('isHost', true);\n                break;\n            case 'startDate':\n                this.predicate.delete('startDate');\n                this.predicate.set('startDate', value);\n        }\n    }\n\n    get axiosParams() {\n        const params = new URLSearchParams();\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\n        params.append('pageSize', this.pagingParams.pageSize.toString());\n        this.predicate.forEach((value, key) => {\n            if (key === 'startDate'){\n                params.append(key, (value as Date).toISOString())\n            } else {\n                params.append(key, value);\n            }\n        })\n        return params;\n    }\n\n    get activitiesByDate(){\n        return Array.from(this.activityRegistry.values()).sort((a,b) => a.date!.getTime() - b.date!.getTime());\n    }\n\n    get groupedActivities(){\n        return Object.entries(\n            this.activitiesByDate.reduce((activities, activity) => {\n                const date = format(activity.date!, 'dd MMM yyyy');\n                activities[date] = \n                    activities[date] \n                        ? [...activities[date], activity]\n                        : [activity];\n                return activities;\n            }, {} as {[key:string]: Activity[]})\n        )\n    }\n\n    loadActivities = async () => {\n        this.loadingInitial = true;\n        try{\n            const result = await agent.Activities.list(this.axiosParams);\n            result.data.forEach(activity => {\n                this.setActivity(activity);\n            })\n            this.setPagination(result.pagination);\n            this.setLoadingInitial(false);\n\n        } catch(error){\n            console.log(error);\n            this.setLoadingInitial(false);\n        }\n    }\n\n    setPagination = (pagination: Pagination) => {\n        this.pagination = pagination;\n    }\n\n    loadActivity = async (id: string) => {\n        let activity = this.getActivity(id);\n        if (activity){\n            this.selectedActivity = activity;\n            return activity;\n        } else{\n            this.loadingInitial = true;\n            try{\n                activity = await agent.Activities.details(id);\n                this.setActivity(activity);\n                runInAction(() => this.selectedActivity = activity);\n                this.setLoadingInitial(false);\n                return activity;\n            } catch(error){\n                console.log(error);\n                this.setLoadingInitial(false);\n            }\n        }\n    }\n\n    private setActivity = (activity: Activity) => {\n        const user = store.userStore.user;\n        if (user){\n            activity.isGoing = activity.attendees!.some(\n                a => a.username === user.username\n            )\n            activity.isHost = activity.hostUsername === user.username;\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\n        }\n\n        activity.date = new Date(activity.date!);\n        this.activityRegistry.set(activity.id, activity);\n    }\n\n    private getActivity = (id: string) => {\n        return this.activityRegistry.get(id);\n    }\n\n    setLoadingInitial = (state: boolean) => {\n        this.loadingInitial = state;\n    }\n\n    createActivity = async (activity: ActivityFormValues) => {\n        const user = store.userStore.user;\n        const attendee = new Profile(user!);\n\n        try{\n            await agent.Activities.create(activity);\n            const newActivity = new Activity(activity);\n            newActivity.hostUsername = user!.username;\n            newActivity.attendees = [attendee];\n            this.setActivity(newActivity);\n            runInAction(() => {\n                this.selectedActivity = newActivity;\n            })\n\n        } catch(error)\n        {\n            console.log(error);\n        }\n    }\n\n    updateActivity = async (activity: ActivityFormValues) => {\n        try{\n            await agent.Activities.update(activity);\n            runInAction(() => {\n                if (activity.id){\n                    let updatedActivity = {...this.getActivity(activity.id), ...activity}\n                this.activityRegistry.set(activity.id, updatedActivity as Activity);\n                this.selectedActivity = activity as Activity;\n                }\n            });\n        }catch(error){\n            console.log(error);\n        }\n    }\n\n    deleteActivity = async (id: string) => {\n        this.loading = true;\n\n        try{\n            await agent.Activities.delete(id);\n            runInAction(() => {\n                this.activityRegistry.delete(id);\n                this.loading = false;\n            });\n        } catch(error){\n            console.log(error);\n            runInAction(() => {\n                this.loading = false;\n            })\n        }\n    }\n\n    updateAttendance = async () => {\n        const user = store.userStore.user;\n        this.loading = true;\n        try{\n            await agent.Activities.attend(this.selectedActivity!.id);\n            runInAction(() => {\n                if (this.selectedActivity?.isGoing){\n                    this.selectedActivity.attendees = this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\n                    this.selectedActivity.isGoing = false;\n                } else{\n                    const attendee = new Profile(user!);\n                    this.selectedActivity?.attendees?.push(attendee);\n                    this.selectedActivity!.isGoing = true;\n                }\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\n            });\n        } catch (error) {\n\n        } finally {\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    cancelActivityToggle = async () => {\n        this.loading = true;\n        try{\n            await agent.Activities.attend(this.selectedActivity!.id);\n            runInAction(() => {\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\n            });\n        } catch(error){\n            console.log(error);\n        } finally{\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    clearSelectedActivity = () => {\n        this.selectedActivity = undefined;\n    }\n\n    updateAttendeeFollowing = (username: string)  => {\n        this.activityRegistry.forEach(activity => {\n            activity.attendees.forEach(attendee => {\n                if (attendee.username === username){\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\n                    attendee.following = !attendee.following;\n                }\n            })\n        });\n    }\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\nimport { store } from \"./store\";\n\nexport default class ProfileStore{\n    profile: Profile | null = null;\n    loadingProfile = false;\n    uploading = false;\n    loading = false;\n    followings: Profile[] = [];\n    loadingFollowings = false;\n    activeTab = 0;\n    userActivities: UserActivity[] = [];\n    loadingActivities = false;\n\n    constructor(){\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.activeTab,\n            activeTab => {\n                if (activeTab === 3 || activeTab === 4){\n                    const predicate = activeTab === 3? 'followers' : 'following';\n                    this.loadFollowings(predicate);\n                } else{\n                    this.followings = [];\n                }\n            }\n        )\n    }\n\n    setActiveTab = (activeTab: any) => {\n        this.activeTab = activeTab;\n    }\n\n    get isCurrentUser(){\n        if (store.userStore.user && this.profile){\n            return store.userStore.user.username == this.profile.username;\n        }\n        return false;\n    }\n\n    loadProfile = async (username: string) => {\n        this.loadingProfile = true;\n        try{\n            const profile = await agent.Profiles.get(username);\n            runInAction(() => {\n                this.profile = profile;\n                this.loadingProfile = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loadingProfile = false);\n        }\n    }\n\n    uploadPhoto = async (file: Blob) => {\n        this.uploading = true;\n        try{\n            const response = await agent.Profiles.uploadPhoto(file);\n            const photo = response.data;\n            runInAction(() => {\n                if (this.profile){\n                    this.profile.photos?.push(photo);\n                    if (photo.isMain && store.userStore.user){\n                        store.userStore.setImage(photo.url);\n                        this.profile.image = photo.url;\n                    }\n                }\n                this.uploading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.uploading = false);\n        }\n    }\n\n    setMainPhoto = async (photo: Photo) => {\n        this.loading = true;\n        try{\n            await agent.Profiles.setMainPhoto(photo.id);\n            store.userStore.setImage(photo.url);\n            runInAction(() => {\n                if (this.profile && this.profile.photos){\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\n                    this.profile.image = photo.url;\n                    this.loading = false;\n                }\n            })\n        } catch(error){\n            runInAction(() => this.loading = false);\n            console.log(error);\n        }\n    }\n\n    deletePhoto = async (photo: Photo) => {\n        this.loading = true;\n        try{\n            await agent.Profiles.deletePhoto(photo.id);\n            runInAction(() => {\n                if (this.profile){\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\n                    this.loading = false;\n                }\n            })\n        } catch( error){\n            runInAction(() => this.loading = false);\n            console.log(error);\n        }\n    }\n\n    updateProfile = async (profile: Partial<Profile>) => {\n        this.loading = true;\n        try{\n            await agent.Profiles.updateProfile(profile);\n            runInAction(() => {\n                if (profile.displayName && profile.displayName !== store.userStore.user?.displayName){\n                    store.userStore.setDisplayName(profile.displayName);\n                }\n                this.profile = {...this.profile, ...profile as Profile};\n                this.loading = false;\n            });\n        } catch(error){\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    updateFollowing = async (username: string, following: boolean) => {\n        this.loading = true;\n        try{\n            await agent.Profiles.updateFollowing(username);\n            store.activityStore.updateAttendeeFollowing(username);\n            runInAction(() => {\n                if (this.profile &&\n                        this.profile.username !== store.userStore.user?.username &&\n                        this.profile.username === username){\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\n                    this.profile.following = !this.profile.following;\n                }\n\n                if (this.profile && this.profile.username === store.userStore.user?.username){\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\n                }\n                this.followings.forEach(profile => {\n                    if (profile.username === username){\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\n                        profile.following = !profile.following;\n                    }\n                })\n                this.loading = false;\n            })\n        } catch(error){\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    loadFollowings = async (predicate: string) => {\n        this.loadingFollowings = true;\n        try{\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\n            runInAction(() => {\n                this.followings = followings;\n                this.loadingFollowings = false;\n            });\n        }catch(error){\n            console.log(error);\n            runInAction(() => this.loadingFollowings = false);\n        }\n    }\n\n    loadUserActivities = async (username: string, predicate?: string) => {\n        this.loadingActivities = true;\n        try{\n            const activities = await agent.Profiles.listActivities(username, predicate!);\n            runInAction(() => {\n                this.userActivities = activities;\n                this.loadingActivities = false;\n            });\n        } catch(error){\n            console.log(error);\n            runInAction(() => {\n                this.loadingActivities = false;\n            });\n        }\n    }\n}","import { makeAutoObservable, runInAction } from \"mobx\";\nimport { history } from \"../..\";\nimport agent from \"../api/agent\";\nimport { Profile } from \"../models/profile\";\nimport { User, UserFormValues } from \"../models/user\";\nimport { store } from \"./store\";\n\nexport default class UserStore{\n    user: User | null = null;\n    fbAccessToken: string | null = null;\n    fbLoading = false;\n    refreshTokenTimeout: any;\n\n    constructor(){\n        makeAutoObservable(this)\n    }\n\n    get isLoggedIn(){\n        return !!this.user;\n    }\n\n    login = async (creds: UserFormValues) => {\n        try{\n            const user = await agent.Account.login(creds);\n            store.commonStore.setToken(user.token);\n            this.startRefreshTokenTimer(user);\n            runInAction(() => this.user = user);\n            history.push('/activities');\n            store.modalStore.closeModal();\n        } catch (error){\n            throw error;\n        }\n    }\n\n    logout = () => {\n        store.commonStore.setToken(null);\n        window.localStorage.removeItem('jwt');\n        this.user = null;\n        history.push('/');\n    }\n\n    getUser = async () => {\n        try{\n            const user = await agent.Account.current();\n            store.commonStore.setToken(user.token);\n            runInAction(() => this.user = user);\n            this.startRefreshTokenTimer(user);\n        } catch(error){\n            console.log(error);\n        }\n    }\n\n    register = async (creds: UserFormValues) => {\n        try{\n            await agent.Account.register(creds);\n            history.push(`/account/registerSuccess?email=${creds.email}`);\n            store.modalStore.closeModal();\n        } catch (error){\n            throw error;\n        }\n    }\n\n    setImage = (image: string) => {\n        if (this.user){\n            this.user.image = image;\n        }\n    }\n\n    setDisplayName = (name: string) => {\n        if (this.user) this.user.displayName = name;\n    }\n\n    getFacebookLoginStatus = async () => {\n        window.FB.getLoginStatus(response => {\n            if (response.status === 'connected'){\n                this.fbAccessToken = response.authResponse.accessToken;\n            }\n        })\n    }\n\n    facebookLogin = () => {\n        this.fbLoading = true;\n        const apiLogin = (accessToken: string) => {\n            agent.Account.fbLogin(accessToken).then(user => {\n                store.commonStore.setToken(user.token);\n                this.startRefreshTokenTimer(user);\n                runInAction(() => {\n                    this.user = user;\n                    this.fbLoading = false;\n                })\n                history.push('/activities');\n            }).catch(error => {\n                console.log(error);\n                runInAction(() => this.fbLoading = false);\n            })\n\n        }\n\n        if (this.fbAccessToken){\n            apiLogin(this.fbAccessToken);\n        } else {\n            window.FB.login(response => {\n                apiLogin(response.authResponse.accessToken);\n            } ,{scope: 'public_profile,email'})\n        }\n    }\n\n    refreshToken = async () => {\n        this.stopRefreshTokenTimer();\n        try{\n            const user = await agent.Account.refreshToken();\n            runInAction(() => this.user = user);\n            store.commonStore.setToken(user.token);\n            this.startRefreshTokenTimer(user);\n        } catch(error){\n            console.log(error);\n        }\n    }\n\n    private startRefreshTokenTimer(user : User){\n        const jwtToken = JSON.parse(atob(user.token.split('.')[1]));\n        const expires = new Date(jwtToken.exp * 1000);\n        const timeout = expires.getTime() - Date.now() - (60 * 1000);\n        this.refreshTokenTimeout = setTimeout(this.refreshToken, timeout);\n    }\n\n    private stopRefreshTokenTimer(){\n        clearTimeout(this.refreshTokenTimeout);\n    }\n}","import { createContext, useContext } from \"react\";\nimport ActivityStore from \"./activityStore\";\nimport CommentStore from \"./commentStore\";\nimport CommonStore from \"./commonStore\";\nimport ModalStore from \"./modalStore\";\nimport ProfileStore from \"./profileStore\";\nimport UserStore from \"./userStore\";\n\ninterface Store{\n    activityStore: ActivityStore,\n    commonStore: CommonStore,\n    userStore: UserStore,\n    modalStore: ModalStore,\n    profileStore:  ProfileStore,\n    commentStore: CommentStore;\n}\n\nexport const store: Store = {\n    activityStore: new ActivityStore(),\n    commonStore: new CommonStore(),\n    userStore: new UserStore(),\n    modalStore: new ModalStore(),\n    profileStore: new ProfileStore(),\n    commentStore: new CommentStore()\n}\n\nexport const StoreContext = createContext(store);\n\nexport function useStore(){\n    return useContext(StoreContext);\n}","import { makeAutoObservable, reaction } from \"mobx\";\nimport { ServerError } from \"../models/servererror\";\n\nexport default class CommonStore{\n    error: ServerError | null = null;\n    token: string | null = window.localStorage.getItem('jwt');\n    appLoaded = false;\n\n    constructor(){\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.token,\n            token => {\n                if (token){\n                    window.localStorage.setItem('jwt', token)\n                } else {\n                    window.localStorage.removeItem('jwt')\n                }\n            }\n        )\n    }\n\n    setServerError = (error: ServerError) => {\n        this.error = error;\n    }\n\n    setToken = (token: string | null) => {\n        this.token = token;\n    }\n\n    setAppLoaded = () => {\n        this.appLoaded = true;\n    }\n}","import { makeAutoObservable } from \"mobx\"\n\ninterface Modal {\n    open: boolean;\n    body: JSX.Element | null;\n}\n\nexport default class ModalStore{\n    modal : Modal = {\n        open: false,\n        body: null\n    }\n\n    constructor(){\n        makeAutoObservable(this)\n    }\n\n    openModal = (content: JSX.Element) => {\n        this.modal.open = true;\n        this.modal.body = content;\n    }\n    \n    closeModal = () => {\n        this.modal.open = false;\n        this.modal.body = null;\n    }\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\nimport { makeAutoObservable, runInAction } from \"mobx\";\nimport { ChatComment } from \"../models/comment\";\nimport { store } from \"./store\";\n\nexport default class CommentStore{\n    comments: ChatComment[] = [];\n    hubConnection: HubConnection | null = null;\n\n    constructor(){\n        makeAutoObservable(this);\n    }\n\n    createHubConnection = (activityId: string) => {\n        if (store.activityStore.selectedActivity){\n            this.hubConnection = new HubConnectionBuilder()\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\n                    accessTokenFactory: () => store.userStore.user?.token!\n                })\n                .withAutomaticReconnect()\n                .configureLogging(LogLevel.Information)\n                .build();\n\n            this.hubConnection.start().catch(error => console.log('Error establishing the connection: ', error));\n\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\n                runInAction(() => {\n                    comments.forEach(comment => {\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\n                    })\n                    this.comments = comments\n                });\n            })\n\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\n                runInAction(() => {\n                    comment.createdAt = new Date(comment.createdAt);\n                    this.comments.unshift(comment)});\n            })\n        }\n    }\n\n    stopHubConnection = () => {\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error));\n    }\n\n    clearComments = () => {\n        this.comments = [];\n        this.stopHubConnection();\n    }\n\n    addComment = async (values: any) => {\n        values.activityId = store.activityStore.selectedActivity?.id;\n        try{\n            await this.hubConnection?.invoke('SendComment', values);\n        } catch(error){\n            console.log(error);\n        }\n    }\n}","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link, NavLink } from 'react-router-dom';\nimport { Button, Container, Dropdown, Image, Menu } from 'semantic-ui-react';\nimport { useStore } from '../stores/store';\n\nexport default observer(function NavBar(){\n    const {userStore : {user, logout, isLoggedIn}} = useStore();\n    return (\n        <Menu inverted fixed='top'>\n            <Container>\n                <Menu.Item exact as={NavLink} to='/' header>\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{marginRight: '10px'}}/>\n                    Reactivities\n                </Menu.Item>\n                {isLoggedIn &&\n                <>\n                    <Menu.Item as={NavLink} to='/activities' name='Activities'/>\n                    <Menu.Item as={NavLink} to='/errors' name='Errors'/>\n                    <Menu.Item>\n                        <Button as={NavLink} to='/createActivity' positive content='Create Activity'/>\n                    </Menu.Item>\n                    <Menu.Item position='right'>\n                        <Image src={user?.image || '/assets/user.png'} avatar spaced='right'/>\n                        <Dropdown pointing='top left' text={user?.displayName}>\n                            <Dropdown.Menu>\n                                <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} text='My Profile' icon='user'/>\n                                <Dropdown.Item onClick={logout} text='Logout' icon='power'/>\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Menu.Item>\n                </>}\n            </Container>\n        </Menu>\n    );\n})","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\n\ninterface Props{\n    placeholder: string;\n    name: string;\n    label?: string;\n    type?: string;\n}\n\nexport default function MyTextInput(props: Props){\n    const [field, meta] = useField(props.name);\n\n    return(\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <input {...field} {...props}/>\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    );\n\n}","import { ErrorMessage, Form, Formik } from 'formik';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Button, Header, Label } from 'semantic-ui-react';\nimport MyTextInput from '../../app/common/form/MyTextInput';\nimport { useStore } from '../../app/stores/store';\n\nexport default observer(function LoginForm(){\n    const {userStore} = useStore();\n\n    return (\n        <Formik\n            initialValues={{email: '', password: '', error: null}}\n            onSubmit={(values, {setErrors}) => \n                userStore.login(values).catch((error) => {\n                    setErrors({error: error.response.data});\n                })}\n        >\n            {({handleSubmit, isSubmitting, errors}) => (\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center'></Header>\n                    <MyTextInput name='email' placeholder='Email'/>\n                    <MyTextInput name='password' placeholder='Password' type='password'/>\n                    <ErrorMessage\n                        name='error' render={() => <Label style={{marginBottom: 10}} basic color='red' content={errors.error}/>}\n                    />\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid/>\n                </Form>\n            )}\n        </Formik>\n    );\n})","import React from 'react';\nimport { Message } from 'semantic-ui-react';\n\ninterface Props{\n    errors: any;\n}\n\nexport default function ValidationErrors({errors}: Props){\n    return (\n        <Message error>\n            {errors && (\n                <Message.List>\n                    {errors.map((err: any, i: any) => (\n                        <Message.Item key={i}>{err}</Message.Item>\n                    ))}\n                </Message.List>\n            )\n            }\n        </Message>\n    );\n}","import { ErrorMessage, Form, Formik } from 'formik';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Button, Header } from 'semantic-ui-react';\nimport MyTextInput from '../../app/common/form/MyTextInput';\nimport { useStore } from '../../app/stores/store';\nimport * as Yup from 'yup';\nimport ValidationErrors from '../errors/ValidationErrors';\n\nexport default observer(function RegisterForm(){\n    const {userStore} = useStore();\n\n    return (\n        <Formik\n            initialValues={{displayName: '', username: '', email: '', password: '', error: null}}\n            onSubmit={(values, {setErrors}) => \n                userStore.register(values).catch((error) => setErrors({error}))}\n                \n            validationSchema={Yup.object({\n                displayName: Yup.string().required(),\n                username: Yup.string().required(),\n                email: Yup.string().required().email(),\n                password: Yup.string().required(),\n            })}\n        >\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\n                    <Header as='h2' content='Sign up to Reactivities' color='teal' textAlign='center'></Header>\n                    <MyTextInput name='displayName' placeholder='Display Name'/>\n                    <MyTextInput name='username' placeholder='Username'/>\n                    <MyTextInput name='email' placeholder='Email'/>\n                    <MyTextInput name='password' placeholder='Password' type='password'/>\n                    <ErrorMessage\n                        name='error' render={() => <ValidationErrors errors={errors.error}/>}\n                    />\n                    <Button disabled={!isValid || !dirty || isSubmitting}\n                        loading={isSubmitting} positive content='Register' type='submit' fluid/>\n                </Form>\n            )}\n        </Formik>\n    );\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Container, Divider, Header, Image, Segment } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport LoginForm from '../users/LoginForm';\nimport RegisterForm from '../users/RegisterForm';\n\nexport default observer(function HomePage(){\n    const {userStore, modalStore} = useStore();\n    return(\n\n        <Segment inverted textAlign='center' vertical className='masthead'>\n            <Container text>\n                <Header as='h1' inverted>\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{marginBottom: 12}}/>\n                    Reactivities\n                </Header>\n                {userStore.isLoggedIn ? (\n                    <>\n                        <Header as='h2' inverted content='Welcome to Reactivities'/>\n                        <Button as={Link} to='/activities' size='huge' inverted>\n                            Go to Activities!\n                        </Button>\n                    </>\n                    \n                ) : (\n                    <>\n                        <Button onClick={() => modalStore.openModal(<LoginForm/>)} size='huge' inverted>\n                            Login!\n                        </Button>\n                        <Button onClick={() => modalStore.openModal(<RegisterForm/>)} size='huge' inverted>\n                            Register!\n                        </Button>\n                        <Divider horizontal inverted>Or</Divider>\n                        <Button\n                            loading={userStore.fbLoading}\n                            size='huge'\n                            inverted\n                            color='facebook'\n                            content='Login with Facebook'\n                            onClick={userStore.facebookLogin}\n                        />\n                    </>\n                )}\n            </Container>\n        </Segment>\n    );\n})","import React from 'react';\nimport { Dimmer, Loader } from 'semantic-ui-react';\n\ninterface Props{\n    inverted?: boolean;\n    content?: string;\n}\n\nexport default function LoadingComponent({inverted = true, content = 'Loading...'} : Props){\n    return (\n        <Dimmer active={true} inverted={inverted}>\n            <Loader content={content}/>\n        </Dimmer>\n    );\n}","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\n\ninterface Props{\n    placeholder: string;\n    name: string;\n    rows: number;\n    label?: string;\n}\n\nexport default function MyTextArea(props: Props){\n    const [field, meta] = useField(props.name);\n\n    return(\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <textarea {...field} {...props}/>\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    );\n\n}","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label, Select } from 'semantic-ui-react';\n\ninterface Props{\n    placeholder: string;\n    name: string;\n    options: any;\n    label?: string;\n}\n\nexport default function MySelectInput(props: Props){\n    const [field, meta, helpers] = useField(props.name);\n\n    return(\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <Select\n                clearable\n                options={props.options}    \n                value={field.value || null}\n                onChange={(e,d) => helpers.setValue(d.value)}\n                onBlur={() => helpers.setTouched(true)}\n                placeholder={props.placeholder}\n            />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    );\n\n}","export const categoryOptions = [\n    {text: 'Drinks', value: 'drinks'},\n    {text: 'Culture', value: 'culture'},\n    {text: 'Film', value: 'film'},\n    {text: 'Food', value: 'food'},\n    {text: 'Music', value: 'music'},\n    {text: 'Travel', value: 'travel'}\n]","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\n\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>){\n    const [field, meta, helpers] = useField(props.name!);\n\n    return(\n        <Form.Field error={meta.touched && !!meta.error}>\n            <DatePicker\n                {...field}\n                {...props}\n                selected={(field.value && new Date(field.value)) || null}\n                onChange={value => helpers.setValue(value)}\n            />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    );\n\n}","import { observer } from 'mobx-react-lite';\nimport React, { useEffect, useState } from 'react';\nimport { Link, useHistory, useParams } from 'react-router-dom';\nimport { Button, Header, Segment } from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { useStore } from '../../../app/stores/store';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport MyTextInput from '../../../app/common/form/MyTextInput';\nimport MyTextArea from '../../../app/common/form/MyTextArea';\nimport MySelectInput from '../../../app/common/form/MySelectInput';\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\nimport MyDateInput from '../../../app/common/form/MyDateInput';\nimport { ActivityFormValues } from '../../../app/models/activity';\nimport {v4 as uuid} from 'uuid';\n\nexport default observer(function ActivityForm(){\n    const history = useHistory();\n    const {activityStore} = useStore();\n    const {createActivity, updateActivity, loadActivity, loadingInitial} = activityStore;\n    const {id} = useParams<{id: string}>();\n\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\n\n    const validationSchema = Yup.object({\n        title: Yup.string().required('The activity title is required'),\n        description: Yup.string().required('The activity description is required'),\n        category: Yup.string().required('The activity category is required'),\n        date: Yup.string().required('Date is required').nullable(),\n        venue: Yup.string().required('The activity venue is required'),\n        city: Yup.string().required('The activity city is required')\n    })\n\n    useEffect(() => {\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)));\n    }, [id, loadActivity]);\n\n    function handleFormSubmit(activity: ActivityFormValues){\n        if (!activity.id) {\n            let newActivity = {\n                ...activity, id: uuid()\n            }\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`));\n        } else{\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`));\n        }\n    }\n\n    if (loadingInitial) return <LoadingComponent content='Loading activity...'/>\n\n    return(\n        <Segment clearing>\n            <Header content='Activity Details' sub color='teal'/>\n            <Formik\n                validationSchema={validationSchema}\n                enableReinitialize\n                initialValues={activity}\n                onSubmit={values => handleFormSubmit(values)}>\n                {({handleSubmit, isValid, isSubmitting, dirty}) => (\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                    <MyTextInput placeholder='Title' name='title'/>\n                    <MyTextArea rows={3} placeholder='Description' name='description'/>\n                    <MySelectInput options={categoryOptions} placeholder='Category' name='category' />\n                    <MyDateInput\n                        placeholderText='Date'\n                        name='date'\n                        showTimeSelect\n                        timeCaption='time'\n                        dateFormat='MMMM d, yyyy h:mm aa'\n                    />\n                    <Header content='Location Details' sub color='teal'/>\n                    <MyTextInput placeholder='City' name='city' />\n                    <MyTextInput placeholder='Venue' name='venue' />\n                    <Button\n                        disabled={isSubmitting || !isValid || !dirty}\n                        loading={isSubmitting} floated='right' positive type='submit' content='Submit' />\n                    <Button as={Link} to={'/activities'} floated='right' type='button' content='Cancel'/>\n                </Form> )}\n            </Formik>\n        </Segment>\n    );\n})","import { observer } from 'mobx-react-lite';\nimport React, { SyntheticEvent } from 'react';\nimport { Reveal, Button } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\n\ninterface Props{\n    profile: Profile;\n}\n\nexport default observer(function FollowButton({profile}: Props){\n    const {profileStore, userStore} =  useStore();\n    const {updateFollowing, loading} = profileStore;\n\n    if (userStore.user?.username === profile.username) return null;\n\n    function handleFollow(e: SyntheticEvent, username: string) {\n        e.preventDefault();\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\n    }\n\n    return(\n        <Reveal animated='move'>\n        <Reveal.Content visible style={{width: '100%'}}>\n            <Button fluid color='teal' \n            content={profile.following ? 'Following' : 'Not following'}/>\n        </Reveal.Content>\n        <Reveal.Content hidden style={{width: '100%'}}>\n            <Button\n                basic\n                fluid\n                color={profile.following ?  'red' : 'green'}\n                content={profile.following? 'Unfollow': 'Follow'}\n                loading={loading}\n                onClick={(e) => handleFollow(e, profile.username)}/>\n        </Reveal.Content>\n        </Reveal>\n    );\n}\n)","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Card, Icon, Image } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport FollowButton from './FollowButton';\n\ninterface Props{\n    profile: Profile\n}\n\nexport default observer(function ProfileCard({profile} : Props){\n    function truncate(str: string | undefined){\n        if (str){\n            return str.length > 40 ? str.substring(0,37) + '...' : str;\n        }\n    }\n\n    return (\n        <Card as={Link} to={`/profiles/${profile.username}`}>\n            <Image src={profile.image || 'assets/user.png'}/>\n            <Card.Content>\n                <Card.Header>{profile.displayName}</Card.Header>\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\n            </Card.Content>\n            <Card.Content extra>\n                <Icon name='user'/>\n                {profile.followersCount} followers\n            </Card.Content>\n            <FollowButton profile={profile}/>\n        </Card>\n    );\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Image, List, Popup } from 'semantic-ui-react';\nimport { Profile } from '../../../app/models/profile';\nimport ProfileCard from '../../profiles/ProfileCard';\n\ninterface Props{\n    attendees: Profile[];\n}\n\nexport default observer(function ActivityListItemAttendee({attendees}: Props){\n    const styles = {\n        borderColor: 'orange',\n        borderWidth: 3\n    }\n\n    return(\n        <List horizontal>\n            {attendees.map(attendee => (\n                <Popup\n                    hoverable\n                    key={attendee.username}\n                    trigger={\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\n                            <Image \n                                size='mini'\n                                circular\n                                bordered\n                                src={attendee.image || '/assets/user.png'}\n                                style={attendee.following? styles : null }/>\n                        </List.Item>\n                    }\n                >\n                    <Popup.Content>\n                        <ProfileCard profile={attendee}/>\n                    </Popup.Content>\n                </Popup>\n\n            ))}\n        </List>\n    )\n})","import React, {  } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\nimport { Activity } from '../../../app/models/activity';\nimport {format} from 'date-fns';\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\n\ninterface Props{\n    activity: Activity\n}\n\nexport default function ActivityListItem({activity}: Props){\n    return(\n        <Segment.Group>\n            <Segment>\n                {activity.isCancelled &&\n                    <Label attached='top' color='red' content='Cancelled' style={{textAlign: 'center'}}/>\n                }\n                <Item.Group>\n                    <Item>\n                        <Item.Image style={{marginBottom: 3}} size='tiny' circular src={activity.host?.image || '/assets/user.png'}/>\n                        <Item.Content>\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>{activity.title}\n                                {activity.title}\n                            </Item.Header>\n                            <Item.Description>Hosted by <Link to={`/profiles/${activity.hostUsername}`}>{activity.host?.displayName}</Link></Item.Description>\n                            {activity.isHost && (\n                                <Item.Description>\n                                    <Label basic color='orange'>\n                                        You are hosting this activity\n                                    </Label>\n                                </Item.Description>\n                            )}\n                            {activity.isGoing && !activity.isHost && (\n                                <Item.Description>\n                                    <Label basic color='green'>\n                                        You are going to this activity\n                                    </Label>\n                                </Item.Description>\n                            )}\n                        </Item.Content>\n                    </Item>\n                </Item.Group>\n            </Segment>\n            <Segment>\n                <span>\n                    <Icon name='clock'/> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\n                    <Icon name='marker'/> {activity.venue}\n                </span>\n            </Segment>\n            <Segment secondary>\n                <ActivityListItemAttendee attendees={activity.attendees!}/>\n            </Segment>\n            <Segment clearing>\n                <span>{activity.description}</span>\n                <Button\n                    as={Link}\n                    to={`/activities/${activity.id}`}\n                    color='teal'\n                    floated='right'\n                    content='View'\n                />\n            </Segment>\n        </Segment.Group>\n    );\n}","import { observer } from 'mobx-react-lite';\nimport React, { Fragment } from 'react';\nimport { Header } from 'semantic-ui-react';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityListItem from './ActivityListItem';\n\nexport default observer( function ActivityList(){\n    const {activityStore} = useStore();\n    const {groupedActivities} = activityStore;\n\n    return(\n        <Fragment>\n            {groupedActivities.map(([group, activities]) => (\n                <Fragment key={group}>\n                    <Header sub color='teal'>\n                        {group}\n                    </Header>\n                        {activities.map((activity) => (\n                            <ActivityListItem key={activity.id} activity={activity}/>\n                        ))}\n                </Fragment>\n            ))}\n        </Fragment>\n    );\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport Calendar from 'react-calendar';\nimport { Header, Menu } from 'semantic-ui-react';\nimport { date } from 'yup/lib/locale';\nimport { useStore } from '../../../app/stores/store';\n\nexport default observer(function ActivityFilters(){\n\n    const {activityStore: {predicate, setPredicate}} = useStore();\n\n    return(\n        <>\n            <Menu vertical size='large' style={{width: '100%', marginTop: 26}}>\n                <Header icon='filter' attached color='teal' content='Filters'/>\n                <Menu.Item\n                    content='All Activities'\n                    active={predicate.has('all')}\n                    onClick={() => setPredicate('all', 'true')}\n                />\n                <Menu.Item\n                    content=\"I'm going\"\n                    active={predicate.has('isGoing')}\n                    onClick={() => setPredicate('isGoing', 'true')}/>\n                <Menu.Item\n                    content=\"I'm hosting\"\n                    active={predicate.has('isHost')}\n                    onClick={() => setPredicate('isHost', 'true')}\n                    />\n            </Menu>\n            <Header/>\n            <Calendar\n                onChange={(date) => setPredicate('startDate', date as Date)}\n                value={predicate.get('startDate' || new Date())}/>\n        </>\n    );\n})","import React from 'react';\nimport { Button, Placeholder, Segment } from 'semantic-ui-react';\n\n\nexport default function ActivityListItemPlaceHolder(){\n    return(\n        <>\n            <Placeholder fluid style={{marginTop: 25}}>\n                <Segment.Group>\n                    <Segment style={{minHeight: 110}}>\n                        <Placeholder>\n                            <Placeholder.Header>\n                                <Placeholder.Line/>\n                                <Placeholder.Line/>\n                            </Placeholder.Header>\n                            <Placeholder.Paragraph>\n                                <Placeholder.Line/>\n                            </Placeholder.Paragraph>\n                        </Placeholder>\n                    </Segment>\n                    <Segment>\n                        <Placeholder>\n                            <Placeholder.Line/>\n                            <Placeholder.Line/>\n                        </Placeholder>\n                    </Segment>\n                    <Segment secondary style={{minHeight: 70}}/>\n                    <Segment clearing>\n                        <Button disabled color='blue' floated='right' content='View'/>\n                    </Segment>\n                </Segment.Group>\n            </Placeholder>\n        </>\n    );\n\n}","import { observer } from 'mobx-react-lite';\nimport { useState } from 'react';\nimport { Grid, Loader } from 'semantic-ui-react';\nimport ActivityList from './ActivityList';\nimport { useEffect } from 'react';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityFilters from './ActivityFilters';\nimport { PagingParams } from '../../../app/models/pagination';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport ActivityListItemPlaceHolder from './ActivityListItemPlaceHolder';\n\nexport default observer( function ActivityDashboard(){\n\n    const {activityStore} = useStore();\n    const {loadActivities, activityRegistry, setPagingParams, pagination} = activityStore;\n    const [loadingNext, setLoadingNext] = useState(false);\n\n    function handleGetNext(){\n        setLoadingNext(true);\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\n        loadActivities().then(() => setLoadingNext(false));\n    }\n\n    useEffect(() => {\n        if (activityRegistry.size <= 1) loadActivities();\n    }, [activityRegistry.size, loadActivities])\n  \n\n    return(\n        <Grid>\n            <Grid.Column width='10'>\n                {activityStore.loadingInitial && !loadingNext ? (\n                    <>\n                        <ActivityListItemPlaceHolder/>\n                        <ActivityListItemPlaceHolder/>\n                    </>\n                ) : (\n                    <InfiniteScroll\n                        pageStart={0}\n                        loadMore={handleGetNext}\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\n                        initialLoad={false}\n                        >\n                        <ActivityList/>\n                    </InfiniteScroll>\n                )}\n            </Grid.Column>\n            <Grid.Column width='6'>\n                <ActivityFilters/>\n            </Grid.Column>\n            <Grid.Column width={10}>\n                <Loader active={loadingNext}/>\n            </Grid.Column>\n        </Grid>\n    );\n})  ","import { Formik, Form, Field, FieldProps } from 'formik';\nimport { observer } from 'mobx-react-lite';\nimport { useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport {Segment, Header, Comment, Loader} from 'semantic-ui-react';\nimport { useStore } from '../../../app/stores/store';\nimport * as Yup from 'yup';\nimport { formatDistanceToNow } from 'date-fns';\n\ninterface Props{\n    activityId: string;\n}\n\nexport default observer(function ActivityDetailedChat({activityId}: Props) {\n\n    const {commentStore} = useStore();\n\n    useEffect(() => {\n        if (activityId){\n            commentStore.createHubConnection(activityId);\n        }\n        return () => {\n            commentStore.clearComments();\n        }\n    }, [commentStore, activityId]);\n\n    return (\n        <>\n            <Segment\n                textAlign='center'\n                attached='top'\n                inverted\n                color='teal'\n                style={{border: 'none'}}\n            >\n            <Header>Chat about this event</Header>\n            </Segment>\n            <Segment attached clearing>\n\n            <Formik\n                        onSubmit={(values, {resetForm}) => commentStore.addComment(values).then(() => resetForm())}\n                        initialValues={{body: ''}} \n                        validationSchema={Yup.object({\n                            body: Yup.string().required()\n                        })}                      \n                    >\n                        {({isSubmitting, isValid, handleSubmit}) => (\n                            <Form className='ui form'>\n                                <Field name='body'>\n                                    {(props: FieldProps) => (\n                                        <div style={{position: 'relative'}}>\n                                            <Loader active={isSubmitting}/>\n                                            <textarea\n                                                placeholder='Enter your comment (Enter to submit, SHIFT = enter for new line)'\n                                                rows={2}\n                                                {...props.field}\n                                                onKeyPress={e => {\n                                                    if (e.key === 'Enter' && e.shiftKey){\n                                                        return;\n                                                    }\n                                                    if (e.key === 'Enter' && !e.shiftKey){\n                                                        e.preventDefault();\n                                                        isValid && handleSubmit();\n                                                    }\n                                                }}\n                                            />\n                                        </div>\n                                    )}\n                                </Field>\n                            </Form>\n                        )}\n                </Formik>\n\n                <Comment.Group>\n                    {commentStore.comments.map(comment => (\n                        <Comment key={comment.id}>\n                        <Comment.Avatar src={comment.image || '/assets/user.png'}/>\n                        <Comment.Content>\n                            <Comment.Author\n                                as={Link} to={`/profiles/${comment.username}`}>\n                                    {comment.displayName}\n                            </Comment.Author>\n                            <Comment.Metadata>\n                                <div>{formatDistanceToNow(comment.createdAt)} ago</div>\n                            </Comment.Metadata>\n                            <Comment.Text style={{whiteSpace: 'pre-wrap'}}>{comment.body}</Comment.Text>\n                        </Comment.Content>\n                        </Comment>\n                    ))}\n\n                </Comment.Group>\n            </Segment>\n        </>\n\n    )\n})\n","import { format } from 'date-fns';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\nimport {Activity} from \"../../../app/models/activity\";\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\n    return (\n        <Segment.Group>\n            <Segment attached='top'>\n                <Grid>\n                    <Grid.Column width={1}>\n                        <Icon size='large' color='teal' name='info'/>\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n                        <p>{activity.description}</p>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='calendar' size='large' color='teal'/>\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n            <span>\n              {format(activity.date!,'dd MMM yyyy h:mm aa')}\n            </span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='marker' size='large' color='teal'/>\n                    </Grid.Column>\n                    <Grid.Column width={11}>\n                        <span>{activity.venue}, {activity.city}</span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n        </Segment.Group>\n    )\n})\n","import { Segment, List, Label, Item, Image } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\nimport { observer } from 'mobx-react-lite'\nimport { Activity } from '../../../app/models/activity'\n\ninterface Props{\n    activity: Activity\n}\n\nexport default observer(function ActivityDetailedSidebar ({activity: {attendees, host}}: Props) {\n    if (!attendees) return null;\n\n    return (\n        <>\n            <Segment\n                textAlign='center'\n                style={{ border: 'none' }}\n                attached='top'\n                secondary\n                inverted\n                color='teal'\n            >\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\n            </Segment>\n            <Segment attached>\n                <List relaxed divided>\n                    {attendees.map(attendee => (\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\n                            {attendee.username === host?.username &&\n                            <Label\n                                style={{ position: 'absolute' }}\n                                color='orange'\n                                ribbon='right'\n                            >\n                                Host\n                            </Label>}\n                        <Image size='tiny' src={attendee.image || '/assets/user.png'} />\n                        <Item.Content verticalAlign='middle'>\n                            <Item.Header as='h3'>\n                                <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\n                            </Item.Header>\n                            {attendee.following &&\n                            <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\n                        </Item.Content>\n                        </Item>\n                    ))}                                       \n                </List>\n            </Segment>\n        </>\n\n    )\n})\n","import { format } from 'date-fns';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\nimport {Activity} from \"../../../app/models/activity\";\nimport { useStore } from '../../../app/stores/store';\n\nconst activityImageStyle = {\n    filter: 'brightness(30%)'\n};\n\nconst activityImageTextStyle = {\n    position: 'absolute',\n    bottom: '5%',\n    left: '5%',\n    width: '100%',\n    height: 'auto',\n    color: 'white'\n};\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer (function ActivityDetailedHeader({activity}: Props) {\n    const {activityStore: {updateAttendance, loading, cancelActivityToggle}} = useStore();\n\n    return (\n        <Segment.Group>\n            <Segment basic attached='top' style={{padding: '0'}}>\n                {activity.isCancelled && \n                    <Label style={{position: 'absoolute', zIndex: 1000, left: -14, top: 20 }}\n                        ribbon color='red' content='Cancelled'/>}\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\n                <Segment style={activityImageTextStyle} basic>\n                    <Item.Group>\n                        <Item>\n                            <Item.Content>\n                                <Header\n                                    size='huge'\n                                    content={activity.title}\n                                    style={{color: 'white'}}\n                                />\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\n                                <p>\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link> </strong>\n                                </p>\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Segment>\n            </Segment>\n            <Segment clearing attached='bottom'>\n                {activity.isHost ? (\n                    <>\n                        <Button\n                            color={activity.isCancelled ? 'green' : 'red'}\n                            floated='left'\n                            basic\n                            content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\n                            onClick={cancelActivityToggle}\n                            loading={loading}/>\n                        <Button as={Link}\n                            disabled={activity.isCancelled}\n                            to={`/manage/${activity.id}`}\n                            color='orange' \n                            floated='right'>\n                            Manage Event\n                         </Button>\n                    </>\n\n                ) : activity.isGoing ? (\n                    <Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>\n                ): (\n                    <Button disabled={activity.isCancelled}\n                        loading={loading} onClick={updateAttendance} color='teal'>Join Activity</Button>\n                )}\n            </Segment>\n        </Segment.Group>\n    )\n})\n","import { observer } from 'mobx-react-lite';\nimport React, { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Grid} from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityDetailedChat from './ActivityDetailedChat';\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\nimport ActivityDetailedSideBar from './ActivityDetailedSidebar';\nimport ActivityDetailedHeader from './ActivityDetaledHeader';\n\nexport default observer(function ActivityDetails(){\n\n    const {activityStore} = useStore();\n    const {selectedActivity : activity, loadActivity, loadingInitial, clearSelectedActivity} = activityStore;\n    const {id} = useParams<{id: string}>();\n\n    useEffect(() => {\n        if (id) loadActivity(id);\n        return () => clearSelectedActivity();\n    }, [id, loadActivity, clearSelectedActivity])   \n\n    if (loadingInitial || !activity) return <LoadingComponent/>;\n\n    return (\n        <Grid>\n            <Grid.Column width={10}>\n                <ActivityDetailedHeader activity={activity}/>\n                <ActivityDetailedInfo activity={activity}/>\n                <ActivityDetailedChat activityId={activity.id}/>\n            </Grid.Column>\n            <Grid.Column width={6}>\n                <ActivityDetailedSideBar activity={activity}/>\n            </Grid.Column>\n        </Grid>\n    );\n})","import React, { useState } from 'react';\nimport {Button, Header, Segment} from \"semantic-ui-react\";\nimport axios from 'axios';\nimport ValidationErrors from './ValidationErrors';\n\nexport default function TestErrors() {\n    const baseUrl = process.env.REACT_APP_API_URL;\n\n    const [errors, setErrors] = useState(null);\n\n    function handleNotFound() {\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\n    }\n\n    function handleBadRequest() {\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\n    }\n\n    function handleServerError() {\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\n    }\n\n    function handleUnauthorised() {\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\n    }\n\n    function handleBadGuid() {\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err));\n    }\n\n    function handleValidationError() {\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\n    }\n\n    return (\n        <>\n            <Header as='h1' content='Test Error component' />\n            <Segment>\n                <Button.Group widths='7'>\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\n                </Button.Group>\n            </Segment>\n            {errors &&\n                <ValidationErrors errors={errors}/>\n            }\n        </>\n    )\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\n\nexport default function NotFound(){\n    return(\n\n        <Segment placeholder>\n            <Header icon>\n                <Icon name='search'/>\n                Oops - we've looked everywhere and could not find this.\n            </Header>\n            <Segment.Inline>\n                <Button as={Link} to='/activities' primary>\n                    Return to activities page\n                </Button>\n            </Segment.Inline>\n        </Segment>\n    );\n}","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Container, Header, Segment } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\n\n\nexport default observer( function ServerError(){\n    const {commonStore} = useStore();\n\n    return(\n        <Container>\n            <Header as='h1' content='Server Error'/>\n            <Header sub as='h5' color='red' content={commonStore.error?.message}/>\n            {commonStore.error?.details &&\n                <Segment>\n                    <Header as='h4' content='Stack trace' color='teal'/>\n                    <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\n                </Segment>\n            }\n        </Container>\n    );\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Modal } from 'semantic-ui-react';\nimport { useStore } from '../../stores/store';\n\nexport default observer( function ModalContainer(){\n\n    const {modalStore} = useStore();\n\n    return (\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\n            <Modal.Content>\n                {modalStore.modal.body}\n            </Modal.Content>\n        </Modal>\n    );\n})","import { Form, Formik } from 'formik';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { useStore } from '../../app/stores/store';\nimport * as Yup from 'yup';\nimport MyTextInput from '../../app/common/form/MyTextInput';\nimport MyTextArea from '../../app/common/form/MyTextArea';\nimport { Button } from 'semantic-ui-react';\n\ninterface Props{\n    setEditMode: (editMode: boolean) => void;\n}\n\nexport default observer(function ProfileEditForm({setEditMode}: Props){\n    const {profileStore: {profile, updateProfile}} = useStore();\n\n    return(\n        <Formik\n            initialValues={{displayName: profile?.displayName, bio: profile?.bio}}\n            onSubmit={values => {\n                updateProfile(values).then(() => {\n                    setEditMode(false);\n                })\n            }}\n            validationSchema={Yup.object({\n                displayName: Yup.string().required()\n            })}\n        >\n            {({isSubmitting, isValid, dirty}) => (\n                <Form className='ui form'>\n                    <MyTextInput placeholder='Display Name' name='displayName'/>\n                    <MyTextArea rows={3} placeholder='Add your bio' name='bio'/>\n                    <Button\n                        positive\n                        type='submit'\n                        loading={isSubmitting}\n                        content='Update profile'\n                        floated='right'\n                        disabled={!isValid || !dirty}\n                        />\n                </Form>\n            )}\n        </Formik>\n    );\n})","import { observer } from 'mobx-react-lite';\nimport React, { useState } from 'react';\nimport { Button, Grid, Header, Tab } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport ProfileEditForm from './ProfileEditForm';\n\nexport default observer(function ProfileAbout(){\n    const {profileStore} = useStore();\n    const {isCurrentUser, profile} = profileStore;\n    const [editMode, setEditMode] = useState(false);\n\n    return(\n        <Tab.Pane>\n            <Grid>\n                <Grid.Column width='16'>\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`}/>\n                    {isCurrentUser && (\n                        <Button\n                            floated='right'\n                            basic\n                            content={editMode? 'Cancel' : 'Edit Profile'}\n                            onClick={() => setEditMode(!editMode)}\n                        />\n                    )}\n                </Grid.Column>\n                <Grid.Column width='16'>\n                    {editMode ? \n                        <ProfileEditForm setEditMode={setEditMode}/> :\n                        <span style={{whiteSpace: 'pre-wrap'}}>{profile?.bio}</span>}\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    );\n})","import { format } from 'date-fns';\nimport { observer } from 'mobx-react-lite';\nimport React, { SyntheticEvent, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Card, Grid, Header, Image, Tab, TabProps } from 'semantic-ui-react';\nimport { UserActivity } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\n\nconst panes = [\n    {menuItem: 'Future Events', pane: {key: 'future'}},\n    {menuItem: 'Past Events', pane: {key: 'past'}},\n    {menuItem: 'Hosting', pane: {key: 'hosting'}}\n];\n\nexport default observer(function ProfileActivities(){\n    const {profileStore} = useStore();\n\n    const {loadUserActivities, profile, loadingActivities, userActivities} = profileStore;\n\n    useEffect(() => {\n        loadUserActivities(profile!.username);\n    }, [loadUserActivities, profile]);\n\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key);\n    }\n\n    return(\n        <Tab.Pane loading={loadingActivities}>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='calendar' content={'Activities'}/>\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    <Tab\n                        panes={panes}\n                        menu={{secondary: true, pointing: true}}\n                        onTabChange={(e, data) => handleTabChange(e, data)}\n                    />\n                    <br/>\n                    <Card.Group itemsPerRow={4}>\n                        {userActivities.map((activity: UserActivity) => (\n                            <Card\n                                as={Link}\n                                to={`/activities/${activity.id}`}\n                                key={activity.id}\n                            >\n                                <Image\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\n                                    style={{minHeight: 100, objectFit: 'cover'}}\n                                />\n                                <Card.Content>\n                                    <Card.Header textAlign='center'>{activity.title}</Card.Header>\n                                    <Card.Meta>\n                                        <div>{format(new Date(activity.date), 'do LLL')}</div>\n                                        <div>{format(new Date(activity.date), 'h:mm a')}</div>\n                                    </Card.Meta>\n                                </Card.Content>\n                            </Card>\n                        ))}\n                    </Card.Group>\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n\n    );\n}\n\n)","import { observer } from 'mobx-react-lite';\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport ProfileCard from './ProfileCard';\n\nexport default observer(function ProfileFollowings(){\n    const {profileStore} = useStore();\n    const {profile, followings, loadingFollowings, activeTab} = profileStore;\n\n\n    return(\n        <Tab.Pane loading = {loadingFollowings}>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header \n                        floated='left'\n                        icon='user'\n                        content={activeTab === 3 ?\n                            `People following ${profile?.displayName}` : `People ${profile?.displayName} is following`}/>\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    <Card.Group itemsPerRow={4}>\n                        {followings.map(profile => (\n                            <ProfileCard key={profile.username} profile={profile}/>\n                        ))}\n                    </Card.Group>\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    );\n})","import React from 'react';\nimport { Cropper } from 'react-cropper';\nimport 'cropperjs/dist/cropper.css';\n\ninterface Props{\n    imagePreview: string;\n    setCropper: (cropper : Cropper) => void;\n}\n\nexport default function PhotoWidgetCropper({setCropper, imagePreview} : Props){\n    return(\n        <Cropper \n            src={imagePreview}\n            style={{height: 200, width: '100%'}}\n            initialAspectRatio={1}\n            aspectRatio={1}\n            preview='.img-preview'\n            guides={false}\n            viewMode={1}\n            autoCropArea={1}\n            background={false}\n            onInitialized={cropper => setCropper(cropper)}\n            />\n    );\n\n}","import React, { useCallback } from 'react';\nimport {useDropzone} from 'react-dropzone';\nimport { Header, Icon } from 'semantic-ui-react';\n\ninterface Props{\n    setFiles: (files: any) => void;\n}\n\nexport default function PhotoWidgetDropzone({setFiles}: Props){\n    const dzStyles = {\n        border: 'dashed 3px #eee',\n        borderColor: '',\n        borderRadius: '5px',\n        paddingTop: '30px',\n        textAlign: 'center' as 'center',\n        height: 200\n    }\n\n    const dzActive = {\n        borderColor: 'green'\n    }\n\n    const onDrop = useCallback(acceptedFiles => {\n        setFiles(acceptedFiles.map((file : any) => Object.assign(file, {\n            preview: URL.createObjectURL(file)\n        })));\n    },[setFiles])\n\n    const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\n\n    return(\n        <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles}>\n            <input {...getInputProps()}/>\n            <Icon name='upload' size='huge'/>\n            <Header content='Drop image here'/>\n        </div>\n    );\n}","import { useEffect, useState } from 'react';\nimport { Button, Grid, Header } from 'semantic-ui-react';\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone';\n\ninterface Props{\n    loading: boolean;\n    uploadPhoto: (file: Blob) => void;\n}\n\nexport default function PhotoUploadWidget({loading, uploadPhoto} : Props){\n    const [files, setFiles] = useState<any>([]);\n\n    const [cropper, setCropper] = useState<Cropper>();\n\n    function onCrop(){\n        if (cropper){\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\n        }\n    }\n\n    useEffect(() => {\n        return () => {\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview));\n        }\n    }, [files])\n\n    return(\n        <Grid>\n            <Grid.Column width={4}>\n                <Header color='teal' content='Step 1 - Add Photo'/>\n                <PhotoWidgetDropzone setFiles={setFiles}/>\n            </Grid.Column>\n            <Grid.Column width={1}/>\n            <Grid.Column width={4}>\n                <Header color='teal' content='Step 2 - Rezize image'/>\n                {files && files.length > 0 && (\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview}/>\n                )}\n            </Grid.Column>\n            <Grid.Column width={1}/>\n            <Grid.Column width={4}>\n                <Header color='teal' content='Step 3 - Preview & Upload'/>\n                {files && files.length > 0 &&\n                <>\n                <div className='img-preview' style={{minHeight: 200, overflow: 'hidden'}} />\n                <Button.Group widths={2}>\n                    <Button loading={loading} onClick={onCrop} positive icon='check'/>\n                    <Button disabled={loading} onClick={() => setFiles([])} icon='close'/>\n                </Button.Group>\n                </>}\n            </Grid.Column>\n        </Grid>\n    );\n}","import { observer } from 'mobx-react-lite';\nimport React, { SyntheticEvent, useState } from 'react';\nimport { Button, Card, Grid, Header, Image, Tab } from 'semantic-ui-react';\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget';\nimport { Photo, Profile } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\n\ninterface Props{\n    profile: Profile\n}\n\nexport default observer(function ProfilePhotos({profile}: Props){\n    const {profileStore: {isCurrentUser, uploadPhoto, uploading, loading, setMainPhoto, deletePhoto}} = useStore();\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\n\n    const [target, setTarget] = useState('');\n\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>){\n        setTarget(e.currentTarget.name);\n        setMainPhoto(photo);\n    }\n\n    function handlePhotoUpload(file: Blob){\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\n    }\n\n\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>){\n        setTarget(e.currentTarget.name);\n        deletePhoto(photo);\n    }\n\n    return(\n        <Tab.Pane>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='image' content='Photos'/>\n                    {isCurrentUser && (\n                        <Button floated='right' basic\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}/>\n                    )}\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    {addPhotoMode ? (\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading}/>\n                    ): (\n                        <Card.Group itemsPerRow={5}>\n                            {profile.photos?.map(photo => (\n                                <Card key={photo.id}>\n                                    <Image src={photo.url}/>\n                                    {isCurrentUser && (\n                                        <Button.Group fluid widths={2}>\n                                            <Button\n                                                basic\n                                                color='green'\n                                                content='main'\n                                                name={'main' + photo.id}\n                                                disabled={photo.isMain}\n                                                loading={target === 'main' + photo.id && loading}\n                                                onClick={e => handleSetMainPhoto(photo, e)}\n                                                >\n\n                                            </Button>\n                                            <Button\n                                                basic\n                                                color='red'\n                                                icon='trash'\n                                                loading={target === photo.id && loading}\n                                                onClick={e => handleDeletePhoto(photo, e)}\n                                                name={photo.id}\n                                                disabled={photo.isMain}/>\n                                        </Button.Group>\n                                    )}\n                                </Card>\n                            ))}\n                        </Card.Group>\n                    )}\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    );\n}\n)","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Tab } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\nimport ProfileAbout from './ProfileAbout';\nimport ProfileActivities from './ProfileActivities';\nimport ProfileFollowings from './ProfileFollowings';\nimport ProfilePhotos from './ProfilePhotos';\n\ninterface Props{\n    profile: Profile\n}\n\nexport default observer(function ProfileContent({profile}: Props){\n    const {profileStore} = useStore();\n\n    const panes = [\n        {menuItem: 'About', render: () => <ProfileAbout/>},\n        {menuItem: 'Photos', render: () => <ProfilePhotos profile={profile}/>},\n        {menuItem: 'Events', render: () => <ProfileActivities/>},\n        {menuItem: 'Followers', render: () => <ProfileFollowings/>},\n        {menuItem: 'Following', render: () => <ProfileFollowings/>}\n    ]\n\n    return(\n        <Tab\n            menu={{fluid: true, vertical: true}}\n            menuPosition='right'\n            panes={panes}\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\n        />\n    );\n}\n)","import { observer } from 'mobx-react-lite';\nimport { Divider, Grid, Header, Item, Segment, Statistic } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport FollowButton from './FollowButton';\n\ninterface Props{\n    profile: Profile\n}\n\nexport default observer(function ProfileHeader({profile}: Props){\n    return(\n        <Segment>\n            <Grid>\n                <Grid.Column width={12}>\n                    <Item.Group>\n                        <Item>\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'}/>\n                            <Item.Content verticalAlign='middle'>\n                                <Header as='h1' content={profile.displayName}/>\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Grid.Column>\n                <Grid.Column width={4}>\n                    <Statistic.Group widths={2}>\n                        <Statistic label='Followers' value={profile.followersCount}/>\n                        <Statistic label='Following' value={profile.followingCount}/>\n                    </Statistic.Group>\n                    <Divider/>\n                    <FollowButton profile={profile}/>\n                </Grid.Column>\n            </Grid>\n        </Segment>\n    );\n}\n)","import { observer } from 'mobx-react-lite';\nimport React, { useEffect } from 'react';\nimport { useParams } from 'react-router';\nimport { Grid } from 'semantic-ui-react';\nimport LoadingComponent from '../../app/layout/LoadingComponent';\nimport { useStore } from '../../app/stores/store';\nimport ProfileContent from './ProfileContent';\nimport ProfileHeader from './ProfileHeader';\n\nexport default observer(function ProfilePage(){\n    const {username} = useParams<{username: string}>();\n    const {profileStore} = useStore();\n    const {loadingProfile, loadProfile, profile, setActiveTab} = profileStore;\n\n    useEffect(() => {\n        loadProfile(username);\n        return () => {\n            setActiveTab(0);\n        }\n    }, [loadProfile, username, setActiveTab])\n\n    if (loadingProfile) return <LoadingComponent content='Loading profile...'/>\n\n    return (\n        <Grid>\n            <Grid.Column width={16}>\n                {profile &&\n                <>\n                    <ProfileHeader profile={profile}/>\n                    <ProfileContent profile={profile}/>\n                </>}\n            </Grid.Column>\n        </Grid>\n    );\n})","import { Redirect, Route, RouteComponentProps } from \"react-router\";\nimport { RouteProps } from \"react-router-dom\";\nimport { useStore } from \"../stores/store\";\n\ninterface Props extends RouteProps{\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\n}\n\nexport default function PrivateRoute({component: Component, ...rest} : Props){\n    const {userStore: {isLoggedIn}} = useStore();\n    return(\n        <Route\n            {...rest}\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/'/>}\n        />\n    )\n}","import { useLocation } from \"react-router-dom\";\n\nexport default function useQuery(){\n    return(\n        new URLSearchParams(useLocation().search)\n    );\n}","import React from 'react';\nimport { toast } from 'react-toastify';\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\nimport agent from '../../app/api/agent';\nimport useQuery from '../../app/common/util/hooks';\n\nexport default function RegisterSuccess(){\n    const email = useQuery().get('email') as string;\n\n    function handleConfirmEmailResend(){\n        agent.Account.resendEmailConfirm(email).then(() => {\n            toast.success('Verification email resent - please check your email');\n        }).catch(error => console.log(error))\n    }\n\n    return(\n        <Segment placeholder textAlign='center'>\n            <Header icon color='green'>\n                <Icon name='check'/>\n                Successfully registered!\n            </Header>\n            <p>Please check your email (including junk email) for the verification email</p>\n            {email &&\n                <>\n                    <p>Didn't receive the email? Click the below button to resend</p>\n                    <Button primary onClick={handleConfirmEmailResend} content='Resend email' size='huge'/>\n                </>\n            }\n        </Segment>\n    )\n}","import React, { useEffect, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\nimport agent from '../../app/api/agent';\nimport useQuery from '../../app/common/util/hooks';\nimport { useStore } from '../../app/stores/store';\nimport LoginForm from './LoginForm';\n\nexport default function ConfirmEmail(){\n    const {modalStore} = useStore();\n    const email = useQuery().get('email') as string;\n    const token = useQuery().get('token') as string;\n\n    const Status = {\n        Verifying: 'Verifying',\n        Failed: 'Failed',\n        Success: 'Success'\n    }\n\n    const [status, setStatus] = useState(Status.Verifying);\n\n    function handleConfirmEmailResend(){\n        agent.Account.resendEmailConfirm(email).then(() => {\n            toast.success('Verification email resent - please check your email');\n        }).catch(error => console.log(error))\n    }\n\n    useEffect(() => {\n        agent.Account.verifyEmail(token, email).then(() => {\n            setStatus(Status.Success)\n        }).catch(() => {\n            setStatus(Status.Failed)\n        })\n    }, [Status.Failed, Status.Success, token, email])\n\n    function getBody(){\n        switch(status){\n            case Status.Verifying:\n                return <p>Verifying...</p>;\n            case Status.Failed:\n                return(\n                    <div>\n                        <p>Verification failed. You can try resending the verify link to your email</p>\n                        <Button primary onClick={handleConfirmEmailResend} size='huge' content='Resend email'/>\n                    </div>\n                );\n            case Status.Success:\n                return(\n                    <div>\n                        <p>Email has been verified - you can now login</p>\n                        <Button primary onClick={() => modalStore.openModal(<LoginForm/>)} size='huge' content='Login'/>\n                    </div>\n                );    \n        }\n    }\n\n    return(\n        <Segment placeholder textAlign='center'>\n            <Header>\n                <Icon name='envelope'/>\n                Email verification\n            </Header>\n            <Segment.Inline>\n                {getBody()}\n            </Segment.Inline>\n        </Segment>\n    );\n}","import { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport { observer } from 'mobx-react-lite';\nimport HomePage from '../../features/home/HomePage';\nimport { Route, Switch, useLocation } from 'react-router-dom';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport TestErrors from '../../features/errors/TestError';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport { useEffect } from 'react';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\nimport RegisterSuccess from '../../features/users/RegisterSuccess';\nimport ConfirmEmail from '../../features/users/ConfirmEmail';\n\n\nfunction App() {\n  const location = useLocation();\n  const {commonStore, userStore} = useStore();\n\n  useEffect(() => {\n    if (commonStore.token){\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\n    } else {\n      userStore.getFacebookLoginStatus().then(() => commonStore.setAppLoaded);\n      commonStore.setAppLoaded();\n    }\n  }, [commonStore, userStore])\n\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...'/>\n\n  return (\n    <>\n      <ToastContainer position='bottom-right' hideProgressBar/>\n      <ModalContainer/>\n      <Route exact path='/' component={HomePage}/>\n      <Route\n        path={'/(.+)'}\n        render={() => (\n          <>\n            <NavBar/>\n            <Container style={{marginTop: '7em'}}>\n              <Switch>\n              <PrivateRoute exact path='/activities' component={ActivityDashboard}/>\n              <PrivateRoute  path='/activities/:id' component={ActivityDetails}/>\n              <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm}/>\n              <PrivateRoute path='/profiles/:username' component={ProfilePage}/>\n              <PrivateRoute path='/errors' component={TestErrors}/>\n              <Route path='/server-error' component={ServerError}/>\n              <Route path='/account/registerSuccess' component={RegisterSuccess}/>\n              <Route path='/account/verifyEmail' component={ConfirmEmail}/>\n              <Route component={NotFound}/>\n              </Switch>\n            </Container>\n          </>\n        )}\n        />\n    </>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useEffect } from 'react';\nimport { useLocation } from 'react-router';\n\n\nexport default function ScrollToTop() {\n    const {pathname} = useLocation();\n\n    useEffect(() => {\n        window.scrollTo(0,0);\n    }, [pathname]);\n\n    return null;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.min.css'\nimport {createBrowserHistory} from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n    <StoreContext.Provider value={store}>\n      <Router history={history}>\n        <ScrollToTop/>\n        <App/>\n      </Router>\n    </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}